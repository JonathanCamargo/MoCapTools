%% Example script detailing how Osim functions can be used 

% User starts with: 
% static.trc: marker data for static trial (used for scaling), usually exported from c3d file
% trial.trc: marker data for dynamic trial, usually exported from c3d file
% trial.mot: force plate data for dynamic trial, usually exported from c3d file
% Those files should match in experiment length
% 
% XML Template Files required for OpenSim
% scale.xml: template for scaling setup file 
%   model.osim: template for model file, referenced by scale.xml
%   markers.xml: description of marker placement, referenced by scale.xml
% ik.xml: template for inverse kinematics setup file
% id.xml: template for inverse dynamics setup file
%   (extLoads.xml: template for description of forces, referenced by id.xml, generated in this script)
% 
% Examples of these files can be generated by OpenSim by using the GUI. 

staticTrcFile = './ExampleData/static_01.trc';
trcFile = './ExampleData/LevelGround_ccw_fast_01.trc';
grfMotFile = './ExampleData/LevelGround_ccw_fast_01.mot';

scaleXml = './ExampleData/ScaleSetup.xml';
ikXml = './ExampleData/IKSetup.xml';
idXml = './ExampleData/IDSetup.xml';
mkdir('./ExampleData/generated');
%% First: Scale the model using marker data
% this only needs to be done once per subject
osimOutputFile = './ExampleData/generated/ExampleModel.osim';
Osim.Scale(staticTrcFile,scaleXml,osimOutputFile);

%% Compute Inverse Kinematics
% Inverse kinematics calculates joint angles based on the marker data in
% the trc file. 

% inverse kinematics data will be written to this file
ikMotOutputFile = './ExampleData/generated/LevelGround_ccw_fast_01_IKOut.mot';

% Osim.IK can also be called with two inputs, in which case the mot file
% will be written to somewhere random in the user temporary directory. Its
% path will be available in the output variable ikMotOutputFile. 
[JointKinematicsTable, errorInfo, ikMotOutputFile] = Osim.IK(trcFile, ikXml, ikMotOutputFile);
% JointKinematicsTable contains the same information as ikMotOutputFile,
% but in a table format so that it can be easily manipulated in MATLAB.

% errorInfo contains information on how well the resulting kinematics fits
% with the measured TRC data, which can be used for validation. 
% View it with Osim.viewIKError:
Osim.viewIKError(errorInfo);
figure;
Osim.viewIKError(errorInfo, true); % create a surface plot

% Save the resulting joint angle data to a mat file so that it can be
% loaded quickly in the future. 
% Save it as a new variable called 'data' in every mat file that is saved
% so that we always know what the variable is called when the file is
% loaded. 
data = JointKinematicsTable;
save('./ExampleData/generated/LevelGround_ccw_fast_01_IKOut.mat', 'data');

% Save the IK error data so that it can be used for validation later. 
data = errorInfo;
save('./ExampleData/generated/LevelGround_ccw_fast_01_IKError.mat', 'data');
%% Edit setup xmls
% sometimes the parameters of the xmls need to be changed, so we have tools
% to do that easily 
idXmlUpdated = './ExampleData/generated/IDSetup.xml';
extLoadsFile = './ExampleData/generated/ExtLoads.xml';

% select only the force plates that were used in the trial, and
% automatically determine which feet were on which force plates
forcePlatesUsed = {'Treadmill_R', 'Treadmill_L', 'Amp1', 'Amp2', 'Amp5', 'Amp6', 'Combined'};
grfMotTable = Osim.readMOT(grfMotFile);
columnsToKeep = contains(grfMotTable.Properties.VariableNames, forcePlatesUsed);
columnsToKeep(1) = true; % keep Header column
grfMotTable = grfMotTable(:, columnsToKeep);

% Osim.correlateForcePlates will determine which feet were on which force
% plates, and will give a warning message if a certain force plate had
% multiple feet on it or was unused
sides = Osim.correlateForcePlates(trcFile, grfMotTable); % sides = 'rlrlrlr';
% generate an external loads xml file
extLoadsFile = Osim.createExternalLoads(forcePlatesUsed, sides, extLoadsFile);

% convert to an absolute path so that it will be properly referenced in our
% new file
extLoadsFile = GetFullPath(extLoadsFile);
% update the id xml to reference our new external loads file
% the named inputs should match the tag names in the xml file, use
% Osim.getTags(xml) or tab complete to see the options
idXmlUpdated = Osim.editSetupXML(idXml, 'external_loads_file', extLoadsFile, 'FilePath', idXmlUpdated);

%% Compute Inverse Dynamics
% Inverse dynamics calculates joint torques based on changes in joint
% angles, mass distribution properties, and external loads applied. 

stoOutputFile = './ExampleData/generated/LevelGround_ccw_fast_01_IDOut.sto';

% Osim.ID can also be called with three inputs, in which case the sto file
% will be written to somewhere random in the user temporary directory. Its
% path will be available in the output variable stoOutputFile. 
[JointTorquesTable, stoOutputFile] = Osim.ID(grfMotFile,idXmlUpdated,ikMotOutputFile,stoOutputFile);
% JointTorquesTable contains the same information as stoOutputFile,
% but in a table format so that it can be easily manipulated in MATLAB.

% Save the joint torque data so that it can be loaded quickly later. 
data = JointTorquesTable;
save('./ExampleData/generated/LevelGround_ccw_fast_01_IDOut.mat', 'data');

